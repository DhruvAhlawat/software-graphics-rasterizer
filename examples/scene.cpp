#include "../src/a1.hpp"
#include <glm/gtc/matrix_transform.hpp>
// Program with perspective correct interpolation of vertex attributes.

namespace R = COL781::Software;
// namespace R = COL781::Hardware;
using namespace glm;
int main() {
	R::Rasterizer r;
	int width = 640, height = 480;
    if (!r.initialize("Example 6", width, height,2))
        return EXIT_FAILURE;

    R::ShaderProgram program = r.createShaderProgram(
        r.vsNormalTransform(),
        // r.fsDiffuseLighting()
        r.fsSpecularLighting()
    );

    float vertices[] = {
        0.000000, -1.000000, 0.000000,
		0.723607, -0.447220, 0.525725,
		-0.276388, -0.447220, 0.850649,
		-0.894426, -0.447216, 0.000000,
		-0.276388, -0.447220, -0.850649,
		0.723607, -0.447220, -0.525725,
		0.276388, 0.447220, 0.850649,
		-0.723607, 0.447220, 0.525725,
		-0.723607, 0.447220, -0.525725,
		0.276388, 0.447220, -0.850649,
		0.894426, 0.447216, 0.000000,
		0.000000, 1.000000, 0.000000,
		-0.162456, -0.850654, 0.499995,
		0.425323, -0.850654, 0.309011,
		0.262869, -0.525738, 0.809012,
		0.850648, -0.525736, 0.000000,
		0.425323, -0.850654, -0.309011,
		-0.525730, -0.850652, 0.000000,
		-0.688189, -0.525736, 0.499997,
		-0.162456, -0.850654, -0.499995,
		-0.688189, -0.525736, -0.499997,
		0.262869, -0.525738, -0.809012,
		0.951058, 0.000000, 0.309013,
		0.951058, 0.000000, -0.309013,
		0.000000, 0.000000, 1.000000,
		0.587786, 0.000000, 0.809017,
		-0.951058, 0.000000, 0.309013,
		-0.587786, 0.000000, 0.809017,
		-0.587786, 0.000000, -0.809017,
		-0.951058, 0.000000, -0.309013,
		0.587786, 0.000000, -0.809017,
		0.000000, 0.000000, -1.000000,
		0.688189, 0.525736, 0.499997,
		-0.262869, 0.525738, 0.809012,
		-0.850648, 0.525736, 0.000000,
		-0.262869, 0.525738, -0.809012,
		0.688189, 0.525736, -0.499997,
		0.162456, 0.850654, 0.499995,
		0.525730, 0.850652, 0.000000,
		-0.425323, 0.850654, 0.309011,
		-0.425323, 0.850654, -0.309011,
		0.162456, 0.850654, -0.499995,
    };

    float normals[] = {
        0.1024, -0.9435, 0.3151,
		0.7002, -0.6617, 0.2680,
		-0.2680, -0.9435, 0.1947,
		-0.2680, -0.9435, -0.1947,
		0.1024, -0.9435, -0.3151,
		0.9050, -0.3304, 0.2680,
		0.0247, -0.3304, 0.9435,
		-0.8897, -0.3304, 0.3151,
		-0.5746, -0.3304, -0.7488,
		0.5346, -0.3304, -0.7779,
		0.8026, -0.1256, 0.5831,
		-0.3066, -0.1256, 0.9435,
		-0.9921, -0.1256, -0.0000,
		-0.3066, -0.1256, -0.9435,
		0.8026, -0.1256, -0.5831,
		0.4089, 0.6617, 0.6284,
		-0.4713, 0.6617, 0.5831,
		-0.7002, 0.6617, -0.2680,
		0.0385, 0.6617, -0.7488,
		0.7240, 0.6617, -0.1947,
		0.2680, 0.9435, -0.1947,
		0.4911, 0.7947, -0.3568,
		0.4089, 0.6617, -0.6284,
		-0.1024, 0.9435, -0.3151,
		-0.1876, 0.7947, -0.5773,
		-0.4713, 0.6617, -0.5831,
		-0.3313, 0.9435, -0.0000,
		-0.6071, 0.7947, -0.0000,
		-0.7002, 0.6617, 0.2680,
		-0.1024, 0.9435, 0.3151,
		-0.1876, 0.7947, 0.5773,
		0.0385, 0.6617, 0.7488,
		0.2680, 0.9435, 0.1947,
		0.4911, 0.7947, 0.3568,
		0.7240, 0.6617, 0.1947,
		0.8897, 0.3304, -0.3151,
		0.7947, 0.1876, -0.5773,
		0.5746, 0.3304, -0.7488,
		-0.0247, 0.3304, -0.9435,
		-0.3035, 0.1876, -0.9342,
		-0.5346, 0.3304, -0.7779,
		-0.9050, 0.3304, -0.2680,
		-0.9822, 0.1876, -0.0000,
		-0.9050, 0.3304, 0.2680,
		-0.5346, 0.3304, 0.7779,
		-0.3035, 0.1876, 0.9342,
		-0.0247, 0.3304, 0.9435,
		0.5746, 0.3304, 0.7488,
		0.7947, 0.1876, 0.5773,
		0.8897, 0.3304, 0.3151,
		0.3066, 0.1256, -0.9435,
		0.3035, -0.1876, -0.9342,
		0.0247, -0.3304, -0.9435,
		-0.8026, 0.1256, -0.5831,
		-0.7947, -0.1876, -0.5773,
		-0.8897, -0.3304, -0.3151,
		-0.8026, 0.1256, 0.5831,
		-0.7947, -0.1876, 0.5773,
		-0.5746, -0.3304, 0.7488,
		0.3066, 0.1256, 0.9435,
		0.3035, -0.1876, 0.9342,
		0.5346, -0.3304, 0.7779,
		0.9921, 0.1256, -0.0000,
		0.9822, -0.1876, -0.0000,
		0.9050, -0.3304, -0.2680,
		0.4713, -0.6617, -0.5831,
		0.1876, -0.7947, -0.5773,
		-0.0385, -0.6617, -0.7488,
		-0.4089, -0.6617, -0.6284,
		-0.4911, -0.7947, -0.3568,
		-0.7240, -0.6617, -0.1947,
		-0.7240, -0.6617, 0.1947,
		-0.4911, -0.7947, 0.3568,
		-0.4089, -0.6617, 0.6284,
		0.7002, -0.6617, -0.2680,
		0.6071, -0.7947, -0.0000,
		0.3313, -0.9435, -0.0000,
		-0.0385, -0.6617, 0.7488,
		0.1876, -0.7947, 0.5773,
		0.4713, -0.6617, 0.5831,
    };

    int triangles[] = {
        0, 13, 12,
		1, 13, 15,
		0, 12, 17,
		0, 17, 19,
		0, 19, 16,
		1, 15, 22,
		2, 14, 24,
		3, 18, 26,
		4, 20, 28,
		5, 21, 30,
		1, 22, 25,
		2, 24, 27,
		3, 26, 29,
		4, 28, 31,
		5, 30, 23,
		6, 32, 37,
		7, 33, 39,
		8, 34, 40,
		9, 35, 41,
		10, 36, 38,
		38, 41, 11,
		38, 36, 41,
		36, 9, 41,
		41, 40, 11,
		41, 35, 40,
		35, 8, 40,
		40, 39, 11,
		40, 34, 39,
		34, 7, 39,
		39, 37, 11,
		39, 33, 37,
		33, 6, 37,
		37, 38, 11,
		37, 32, 38,
		32, 10, 38,
		23, 36, 10,
		23, 30, 36,
		30, 9, 36,
		31, 35, 9,
		31, 28, 35,
		28, 8, 35,
		29, 34, 8,
		29, 26, 34,
		26, 7, 34,
		27, 33, 7,
		27, 24, 33,
		24, 6, 33,
		25, 32, 6,
		25, 22, 32,
		22, 10, 32,
		30, 31, 9,
		30, 21, 31,
		21, 4, 31,
		28, 29, 8,
		28, 20, 29,
		20, 3, 29,
		26, 27, 7,
		26, 18, 27,
		18, 2, 27,
		24, 25, 6,
		24, 14, 25,
		14, 1, 25,
		22, 23, 10,
		22, 15, 23,
		15, 5, 23,
		16, 21, 5,
		16, 19, 21,
		19, 4, 21,
		19, 20, 4,
		19, 17, 20,
		17, 3, 20,
		17, 18, 3,
		17, 12, 18,
		12, 2, 18,
		15, 16, 5,
		15, 13, 16,
		13, 0, 16,
		12, 14, 2,
		12, 13, 14,
		13, 1, 14,
    };
	R::Object shape = r.createObject();
	r.setVertexAttribs(shape, 0, 24, 4, vertices);
	r.setVertexAttribs(shape, 1, 24, 3, normals);
	r.setTriangleIndices(shape, 12, triangles);
    r.enableDepthTest();
    vec3 objectColor(0.8f, 0.4f, 0.248f);
    vec3 ambientColor(0.2f, 0.1f, 0.062f);
    vec3 specularColor(0.8f, 0.8f, 0.8f);

    // The transformation matrix.
    mat4 model = mat4(1.0f);
	mat4 view = translate(mat4(1.0f), vec3(0.0f, 0.0f, -3.0f));
    view = rotate(view, radians(45.0f), vec3(1.0f, 0.0f, 0.0f));
    mat4 projection = perspective(radians(60.0f), (float)width/(float)height, 0.1f, 100.0f);

    // Lighting parameters.
    vec3 lightColor(1.0f, 1.0f, 1.0f);
    vec3 lightDir(0.0f, 1.0f, -1.0f);

    while (!r.shouldQuit()) {
        float time = SDL_GetTicks64()*1e-3;
        r.clear(vec4(0.1, 0.1, 0.1, 1.0));
        r.useShaderProgram(program);
        model = rotate(mat4(1.0f), radians(45.0f), vec3(0.0f,1.0f,0.0f));
        lightDir = vec3(cos(time), 0.5f, sin(time));
        r.setUniform(program, "transform", projection * view * model);
        r.setUniform(program, "wsTransform", model);
        r.setUniform(program, "lightColor", lightColor);
        r.setUniform(program, "lightDir", lightDir);
        r.setUniform(program, "objectColor", objectColor);
        r.setUniform(program, "ambientColor", ambientColor);
        // for specular lighting
        r.setUniform(program, "viewPos", vec3(inverse(view) * vec4(0.0f, 0.0f, 0.0f, 1.0f)));
        r.setUniform(program, "specularColor", specularColor);
        r.setUniform(program, "blinnpow", 32);
		r.drawObject(shape);
        r.show();
    }
    r.deleteShaderProgram(program);
    return EXIT_SUCCESS;
}
