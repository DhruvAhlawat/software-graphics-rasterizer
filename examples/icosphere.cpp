#include "../src/a1.hpp"
#include <glm/gtc/matrix_transform.hpp>
// Program with perspective correct interpolation of vertex attributes.

namespace R = COL781::Software;
// namespace R = COL781::Hardware;
using namespace glm;
int main() {
	R::Rasterizer r;
	int width = 640, height = 480;
    if (!r.initialize("Example 6", width, height))
        return EXIT_FAILURE;

    R::ShaderProgram program = r.createShaderProgram(
        r.vsNormalTransform(),
        // r.fsDiffuseLighting()
        r.fsSpecularLighting()
    );

    float vertices[] = {
    0.000000, -1.000000, 0.000000, 1.0,
    0.723607,  -0.447220, 0.525725, 1.0,
    -0.276388,  -0.447220, 0.850649, 1.0,
    -0.894426,  -0.447216, 0.000000, 1.0,
    -0.276388,  -0.447220, -0.850649, 1.0,
    0.723607,  -0.447220, -0.525725, 1.0,
    0.276388,  0.447220, 0.850649, 1.0,
    -0.723607,  0.447220, 0.525725, 1.0,
    -0.723607,  0.447220, -0.525725, 1.0,
    0.276388,  0.447220, -0.850649, 1.0,
    0.894426,  0.447216, 0.000000, 1.0,
    0.000000,  1.000000, 0.000000, 1.0,
    -0.162456,  -0.850654, 0.499995, 1.0,
    0.425323,  -0.850654, 0.309011, 1.0,
    0.262869,  -0.525738, 0.809012, 1.0,
    0.850648,  -0.525736, 0.000000, 1.0,
    0.425323,  -0.850654, -0.309011, 1.0,
    -0.525730,  -0.850652, 0.000000, 1.0,
    -0.688189,  -0.525736, 0.499997, 1.0,
    -0.162456,  -0.850654, -0.499995, 1.0,
    -0.688189,  -0.525736, -0.499997, 1.0,
    0.262869,  -0.525738, -0.809012, 1.0,
    0.951058,  0.000000, 0.309013, 1.0,
    0.951058,  0.000000, -0.309013, 1.0,
    0.000000,  0.000000, 1.000000, 1.0,
    0.587786,  0.000000, 0.809017, 1.0,
    -0.951058,  0.000000, 0.309013, 1.0,
    -0.587786,  0.000000, 0.809017, 1.0,
    -0.587786,  0.000000, -0.809017, 1.0,
    -0.951058,  0.000000, -0.309013, 1.0,
    0.587786,  0.000000, -0.809017, 1.0,
    0.000000,  0.000000, -1.000000, 1.0,
    0.688189,  0.525736, 0.499997, 1.0,
    -0.262869,  0.525738, 0.809012, 1.0,
    -0.850648,  0.525736, 0.000000, 1.0,
    -0.262869,  0.525738, -0.809012, 1.0,
    0.688189,  0.525736, -0.499997, 1.0,
    0.162456,  0.850654, 0.499995, 1.0,
    0.525730,  0.850652, 0.000000, 1.0,
    -0.425323,  0.850654, 0.309011, 1.0,
    -0.425323,  0.850654, -0.309011, 1.0,
    0.162456,  0.850654, -0.499995, 1.0,
    };

    float normals[] = {
         0.000000, -1.000000, 0.000000, 
    0.723607,  -0.447220, 0.525725, 
    -0.276388,  -0.447220, 0.850649, 
    -0.894426,  -0.447216, 0.000000, 
    -0.276388,  -0.447220, -0.850649, 
    0.723607,  -0.447220, -0.525725, 
    0.276388,  0.447220, 0.850649, 
    -0.723607,  0.447220, 0.525725, 
    -0.723607,  0.447220, -0.525725, 
    0.276388,  0.447220, -0.850649, 
    0.894426,  0.447216, 0.000000, 
    0.000000,  1.000000, 0.000000, 
    -0.162456,  -0.850654, 0.499995, 
    0.425323,  -0.850654, 0.309011, 
    0.262869,  -0.525738, 0.809012, 
    0.850648,  -0.525736, 0.000000, 
    0.425323,  -0.850654, -0.309011, 
    -0.525730,  -0.850652, 0.000000, 
    -0.688189,  -0.525736, 0.499997, 
    -0.162456,  -0.850654, -0.499995, 
    -0.688189,  -0.525736, -0.499997, 
    0.262869,  -0.525738, -0.809012, 
    0.951058,  0.000000, 0.309013, 
    0.951058,  0.000000, -0.309013, 
    0.000000,  0.000000, 1.000000, 
    0.587786,  0.000000, 0.809017, 
    -0.951058,  0.000000, 0.309013, 
    -0.587786,  0.000000, 0.809017, 
    -0.587786,  0.000000, -0.809017, 
    -0.951058,  0.000000, -0.309013, 
    0.587786,  0.000000, -0.809017, 
    0.000000,  0.000000, -1.000000, 
    0.688189,  0.525736, 0.499997, 
    -0.262869,  0.525738, 0.809012, 
    -0.850648,  0.525736, 0.000000, 
    -0.262869,  0.525738, -0.809012, 
    0.688189,  0.525736, -0.499997, 
    0.162456,  0.850654, 0.499995, 
    0.525730,  0.850652, 0.000000, 
    -0.425323,  0.850654, 0.309011, 
    -0.425323,  0.850654, -0.309011, 
    0.162456,  0.850654, -0.499995, 
    };

    int triangles[] = 
    {
    1, 14, 13,
    2, 14, 16,
    1, 13, 18,
    1, 18, 20,
    1, 20, 17,
    2, 16, 23,
    3, 15, 25,
    4, 19, 27,
    5, 21, 29,
    6, 22, 31,
    2, 23, 26,
    3, 25, 28,
    4, 27, 30,
    5, 29, 32,
    6, 31, 24,
    7, 33, 38,
    8, 34, 40,
    9, 35, 41,
    10, 36, 42,
    11, 37, 39,
    39, 42, 12,
    39, 37, 42,
    37, 10, 42,
    42, 41, 12,
    42, 36, 41,
    36, 9, 41,
    41, 40, 12,
    41, 35, 40,
    35, 8, 40,
    40, 38, 12,
    40, 34, 38,
    34, 7, 38,
    38, 39, 12,
    38, 33, 39,
    33, 11, 39,
    24, 37, 11,
    24, 31, 37,
    31, 10, 37,
    32, 36, 10,
    32, 29, 36,
    29, 9, 36,
    30, 35, 9,
    30, 27, 35,
    27, 8, 35,
    28, 34, 8,
    28, 25, 34,
    25, 7, 34,
    26, 33, 7,
    26, 23, 33,
    23, 11, 33,
    31, 32, 10,
    31, 22, 32,
    22, 5, 32,
    29, 30, 9,
    29, 21, 30,
    21, 4, 30,
    27, 28, 8,
    27, 19, 28,
    19, 3, 28,
    25, 26, 7,
    25, 15, 26,
    15, 2, 26,
    23, 24, 11,
    23, 16, 24,
    16, 6, 24,
    17, 22, 6,
    17, 20, 22,
    20, 5, 22,
    20, 21, 5,
    20, 18, 21,
    18, 4, 21,
    18, 19, 4,
    18, 13, 19,
    13, 3, 19,
    16, 17, 6,
    16, 14, 17,
    14, 1, 17,
    13, 15, 3,
    13, 14, 15,
    14, 2, 15,
    };
    
	R::Object shape = r.createObject();
	r.setVertexAttribs(shape, 0, 42, 4, vertices);
	r.setVertexAttribs(shape, 1, 42, 3, normals);
	r.setTriangleIndices(shape, 80, triangles);
    r.enableDepthTest();
    vec3 objectColor(0.8f, 0.4f, 0.248f);
    vec3 ambientColor(0.2f, 0.1f, 0.062f);
    vec3 specularColor(0.8f, 0.8f, 0.8f);

    // The transformation matrix.
    mat4 model = mat4(1.0f);
	mat4 view = translate(mat4(1.0f), vec3(0.0f, 0.0f, -3.0f));
    view = rotate(view, radians(45.0f), vec3(1.0f, 0.0f, 0.0f));
    mat4 projection = perspective(radians(60.0f), (float)width/(float)height, 0.1f, 100.0f);

    // Lighting parameters.
    vec3 lightColor(1.0f, 1.0f, 1.0f);
    vec3 lightDir(0.0f, 1.0f, -1.0f);

    while (!r.shouldQuit()) {
        float time = SDL_GetTicks64()*1e-3;
        r.clear(vec4(0.1, 0.1, 0.1, 1.0));
        r.useShaderProgram(program);
        model = rotate(mat4(1.0f), radians(45.0f), vec3(0.0f,1.0f,0.0f));
        lightDir = vec3(cos(time), 0.5f, sin(time));
        r.setUniform(program, "transform", projection * view * model);
        r.setUniform(program, "wsTransform", model);
        r.setUniform(program, "lightColor", lightColor);
        r.setUniform(program, "lightDir", lightDir);
        r.setUniform(program, "objectColor", objectColor);
        r.setUniform(program, "ambientColor", ambientColor);
        // for specular lighting
        r.setUniform(program, "viewPos", vec3(inverse(view) * vec4(0.0f, 0.0f, 0.0f, 1.0f)));
        r.setUniform(program, "specularColor", specularColor);
        r.setUniform(program, "blinnpow", 32);
		r.drawObject(shape);
        r.show();
    }
    r.deleteShaderProgram(program);
    return EXIT_SUCCESS;
}
